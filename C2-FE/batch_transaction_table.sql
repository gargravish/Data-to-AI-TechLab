DECLARE DATAPROCESSING_END_DATE DEFAULT DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY);

CREATE OR REPLACE TABLE `PROJECT_ID.DATASET_ID.TABLE_ID` AS --- UPDATE RELEVANT TABLE_ID
WITH
  -- query to join labels with features -------------------------------------------------------------------------------------------
  get_raw_table AS (
  SELECT
    raw_tx.TX_TS,
    raw_tx.TX_ID,
    raw_tx.CUSTOMER_ID,
    raw_tx.TERMINAL_ID,
    raw_tx.TX_AMOUNT,
    raw_lb.TX_FRAUD
  FROM (
    SELECT
      *
    FROM
      `PROJECT_ID.TX.TX` --- UPDATE PROJECT_ID
    WHERE
      DATE(TX_TS) BETWEEN DATE_SUB(DATAPROCESSING_END_DATE, INTERVAL 14 DAY) AND DATAPROCESSING_END_DATE
    ) raw_tx
  LEFT JOIN 
    `PROJECT_ID.tx.txlabels` as raw_lb --- UPDATE PROJECT_ID
  ON raw_tx.TX_ID = raw_lb.TX_ID),

  # query to calculate TERMINAL spending behaviour --------------------------------------------------------------------------------
  get_variables_delay_window AS (
  SELECT
    TX_TS,
    TX_ID,
    CUSTOMER_ID,
    TERMINAL_ID,
    
    -- Calculate for the 7-day window (unchanged)
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 604800 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_DELAY,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 604800 PRECEDING AND CURRENT ROW ) AS NB_TX_DELAY,
      
    -- Calculate for the delayed windows (unchanged)
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 691200 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_1_DELAY_WINDOW,
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1209600 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_7_DELAY_WINDOW,
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1814400 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_14_DELAY_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 691200 PRECEDING AND CURRENT ROW ) AS NB_TX_1_DELAY_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1209600 PRECEDING AND CURRENT ROW ) AS NB_TX_7_DELAY_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1814400 PRECEDING AND CURRENT ROW ) AS NB_TX_14_DELAY_WINDOW,
    
    -- Calculate for the 15-minute window
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 900 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_15MIN_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 900 PRECEDING AND CURRENT ROW ) AS NB_TX_15MIN_WINDOW,
    
    -- Calculate for the 30-minute window
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1800 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_30MIN_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 1800 PRECEDING AND CURRENT ROW ) AS NB_TX_30MIN_WINDOW,
    
    -- Calculate for the 60-minute window
    SUM(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 3600 PRECEDING AND CURRENT ROW ) AS NB_FRAUD_60MIN_WINDOW,
    COUNT(TX_FRAUD) OVER (PARTITION BY TERMINAL_ID ORDER BY UNIX_SECONDS(TX_TS) ASC RANGE BETWEEN 3600 PRECEDING AND CURRENT ROW ) AS NB_TX_60MIN_WINDOW
    
  FROM get_raw_table),

  # query to calculate TERMINAL risk factors ---------------------------------------------------------------------------------------
  get_risk_factors AS (
  SELECT
    TX_TS,
    TX_ID,
    CUSTOMER_ID,
    TERMINAL_ID,
    -- calculate numerator of risk index
    NB_FRAUD_1_DELAY_WINDOW - NB_FRAUD_DELAY AS TERMINAL_ID_NB_FRAUD_1DAY_WINDOW,
    NB_FRAUD_7_DELAY_WINDOW - NB_FRAUD_DELAY AS TERMINAL_ID_NB_FRAUD_7DAY_WINDOW,
    NB_FRAUD_14_DELAY_WINDOW - NB_FRAUD_DELAY AS TERMINAL_ID_NB_FRAUD_14DAY_WINDOW,
    -- calculate denominator of risk index
    NB_TX_1_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_1DAY_WINDOW,
    NB_TX_7_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_7DAY_WINDOW,
    NB_TX_14_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_14DAY_WINDOW,
    -- For 15, 30, and 60-minute windows
    NB_FRAUD_15MIN_WINDOW AS TERMINAL_ID_NB_FRAUD_15MIN_WINDOW,
    NB_TX_15MIN_WINDOW AS TERMINAL_ID_NB_TX_15MIN_WINDOW,
    NB_FRAUD_30MIN_WINDOW AS TERMINAL_ID_NB_FRAUD_30MIN_WINDOW,
    NB_TX_30MIN_WINDOW AS TERMINAL_ID_NB_TX_30MIN_WINDOW,
    NB_FRAUD_60MIN_WINDOW AS TERMINAL_ID_NB_FRAUD_60MIN_WINDOW,
    NB_TX_60MIN_WINDOW AS TERMINAL_ID_NB_TX_60MIN_WINDOW
  FROM
    get_variables_delay_window),

  # query to calculate the TERMINAL risk index -------------------------------------------------------------------------------------
  get_risk_index AS (
    SELECT
      TX_TS,
      TX_ID,
      CUSTOMER_ID,
      TERMINAL_ID,
      NB_TX_1_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_1DAY_WINDOW,
      NB_TX_7_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_7DAY_WINDOW,
      NB_TX_14_DELAY_WINDOW - NB_TX_DELAY AS TERMINAL_ID_NB_TX_14DAY_WINDOW,
      -- Added the missing columns below
      NB_TX_15MIN_WINDOW AS TERMINAL_ID_NB_TX_15MIN_WINDOW,
      NB_TX_30MIN_WINDOW AS TERMINAL_ID_NB_TX_30MIN_WINDOW,
      NB_TX_60MIN_WINDOW AS TERMINAL_ID_NB_TX_60MIN_WINDOW,
      -- calculate the risk index
      ((NB_FRAUD_1_DELAY_WINDOW - NB_FRAUD_DELAY)/(NB_TX_1_DELAY_WINDOW - NB_TX_DELAY + 0.0001)) AS TERMINAL_ID_RISK_1DAY_WINDOW,
      ((NB_FRAUD_7_DELAY_WINDOW - NB_FRAUD_DELAY)/(NB_TX_7_DELAY_WINDOW - NB_TX_DELAY + 0.0001)) AS TERMINAL_ID_RISK_7DAY_WINDOW,
      ((NB_FRAUD_14_DELAY_WINDOW - NB_FRAUD_DELAY)/(NB_TX_14_DELAY_WINDOW - NB_TX_DELAY + 0.0001)) AS TERMINAL_ID_RISK_14DAY_WINDOW,
      -- Risk index for 15, 30, and 60-minute windows
      (NB_FRAUD_15MIN_WINDOW / (NB_TX_15MIN_WINDOW + 0.0001)) AS TERMINAL_ID_RISK_15MIN_WINDOW,
      (NB_FRAUD_30MIN_WINDOW / (NB_TX_30MIN_WINDOW + 0.0001)) AS TERMINAL_ID_RISK_30MIN_WINDOW,
      (NB_FRAUD_60MIN_WINDOW / (NB_TX_60MIN_WINDOW + 0.0001)) AS TERMINAL_ID_RISK_60MIN_WINDOW
    FROM get_variables_delay_window
  )

# Create the table with TERMINAL features ----------------------------------------------------------------------------
SELECT
  PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S", FORMAT_TIMESTAMP("%Y-%m-%d %H:%M:%S", TX_TS, "UTC")) AS feature_ts,
  TERMINAL_ID AS terminal_id,
  CAST(TERMINAL_ID_NB_TX_15MIN_WINDOW AS INT64) AS terminal_id_nb_tx_15min_window,
  CAST(TERMINAL_ID_NB_TX_30MIN_WINDOW AS INT64) AS terminal_id_nb_tx_30min_window,
  CAST(TERMINAL_ID_NB_TX_60MIN_WINDOW AS INT64) AS terminal_id_nb_tx_60min_window,
  CAST(TERMINAL_ID_NB_TX_1DAY_WINDOW AS INT64) AS terminal_id_nb_tx_1day_window,
  CAST(TERMINAL_ID_NB_TX_7DAY_WINDOW AS INT64) AS terminal_id_nb_tx_7day_window,
  CAST(TERMINAL_ID_NB_TX_14DAY_WINDOW AS INT64) AS terminal_id_nb_tx_14day_window,
  CAST(TERMINAL_ID_RISK_15MIN_WINDOW AS FLOAT64) AS terminal_id_risk_15min_window,
  CAST(TERMINAL_ID_RISK_30MIN_WINDOW AS FLOAT64) AS terminal_id_risk_30min_window,
  CAST(TERMINAL_ID_RISK_60MIN_WINDOW AS FLOAT64) AS terminal_id_risk_60min_window
  CAST(TERMINAL_ID_RISK_1DAY_WINDOW AS FLOAT64) AS terminal_id_risk_1day_window,
  CAST(TERMINAL_ID_RISK_7DAY_WINDOW AS FLOAT64) AS terminal_id_risk_7day_window,
  CAST(TERMINAL_ID_RISK_14DAY_WINDOW AS FLOAT64) AS terminal_id_risk_14day_window,
FROM
  get_risk_index;